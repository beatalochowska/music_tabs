{"version":3,"sources":["components/ResultsList/ResultsList.module.scss","components/SearchForm/SearchForm.module.scss","pages/MainPage/MainPage.module.scss","models/tabulator.ts","dictionaries/tabulatorTypes.ts","components/SearchForm/SearchForm.tsx","components/ResultsList/ResultsList.tsx","api/musicTab.ts","pages/MainPage/MainPage.tsx","App.tsx","index.tsx"],"names":["module","exports","Tabulator","tabulatorTypes","value","CHORDS","label","TEXT_BASS_TAB","TEXT_GUITAR_TAB","PLAYER","ANY","titleMessage","INIT","FAILURE","LOADING","SUCCESS","tabulatorsConverter","SearchForm","onSubmit","searchStatus","useState","searchQuery","setSearchQuery","selectedTabulatorType","setSelectedTabulatorType","event","preventDefault","className","styles","searchForm","searchInput","type","name","placeholder","onChange","target","searchSelect","map","key","searchButton","disabled","xmlns","viewBox","d","renderSingleType","tab","renderedName","ResultsList","list","searchResults","spinner","length","id","artist","songTitle","tabTypes","searchRecord","tabulators","getTabs","query","tabulator","a","apiURL","fetch","json","recordToView","title","MainPage","resultsList","setResultsList","setSearchStatus","header","tabulatorType","then","res","preparedList","catch","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75327bde.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"ResultsList_spinner__1Q36w\",\"searchResults\":\"ResultsList_searchResults__3M6CH\",\"songTitle\":\"ResultsList_songTitle__yxs6x\",\"artist\":\"ResultsList_artist__4OAFs\",\"tabulators\":\"ResultsList_tabulators__1al8K\",\"player\":\"ResultsList_player__3w9d9\",\"guitar\":\"ResultsList_guitar__11ovc\",\"bass\":\"ResultsList_bass__1Uj7r\",\"chords\":\"ResultsList_chords__3Cwb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchInput\":\"SearchForm_searchInput__1QsWF\",\"searchSelect\":\"SearchForm_searchSelect__l8OR0\",\"searchButton\":\"SearchForm_searchButton__2KYYI\",\"searchForm\":\"SearchForm_searchForm__3cA-F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainPage_header__2rRoz\"};","export enum Tabulator {\r\n  CHORDS = \"CHORDS\",\r\n  TEXT_BASS_TAB = \"TEXT_BASS_TAB\",\r\n  TEXT_GUITAR_TAB = \"TEXT_GUITAR_TAB\",\r\n  PLAYER = \"PLAYER\",\r\n  ANY = \"ANY\",\r\n}\r\n\r\nexport interface RecordResponse {\r\n  id: number;\r\n  type: string;\r\n  title: string;\r\n  artist: {\r\n    id: number;\r\n    type: string;\r\n    nameWithoutThePrefix: string;\r\n    useThePrefix: boolean;\r\n    name: string;\r\n  };\r\n  chordsPresent: boolean;\r\n  tabTypes: Tabulator[];\r\n}\r\n\r\nexport interface RecordView {\r\n  artist: string;\r\n  songTitle: string;\r\n  tabTypes: Tabulator[];\r\n}\r\n","import { Tabulator } from \"models/tabulator\";\r\n\r\nexport const tabulatorTypes: Dictionary<Tabulator>[] = [\r\n  {\r\n    value: Tabulator.CHORDS,\r\n    label: \"Chords\",\r\n  },\r\n  {\r\n    value: Tabulator.TEXT_BASS_TAB,\r\n    label: \"Bass\",\r\n  },\r\n  {\r\n    value: Tabulator.TEXT_GUITAR_TAB,\r\n    label: \"Guitar\",\r\n  },\r\n  {\r\n    value: Tabulator.PLAYER,\r\n    label: \"Player\",\r\n  },\r\n  {\r\n    value: Tabulator.ANY,\r\n    label: \"Any\",\r\n  },\r\n];\r\n\r\nexport const titleMessage: { [key: string]: string } = {\r\n  INIT: \"Search for your favourite music\",\r\n  FAILURE: \"Couldn't load results\",\r\n  LOADING: \"Loading...\",\r\n  SUCCESS: \"Searched items list\",\r\n};\r\n\r\nexport const tabulatorsConverter: { [key: string]: string } = {\r\n  CHORDS: \"chords\",\r\n  TEXT_BASS_TAB: \"bass\",\r\n  TEXT_GUITAR_TAB: \"guitar\",\r\n  PLAYER: \"player\",\r\n};\r\n","import React, { useState, FormEvent } from \"react\";\r\nimport { Tabulator } from \"models/tabulator\";\r\nimport { tabulatorTypes } from \"dictionaries/tabulatorTypes\";\r\nimport styles from \"./SearchForm.module.scss\";\r\n\r\ninterface SearchFormProps {\r\n  onSubmit: (query: string, tabulatorType: Tabulator) => void;\r\n  searchStatus: ResponseStatus;\r\n}\r\n\r\nfunction SearchForm({ onSubmit, searchStatus }: SearchFormProps) {\r\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\r\n  const [selectedTabulatorType, setSelectedTabulatorType] = useState<Tabulator>(\r\n    Tabulator.ANY\r\n  );\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    onSubmit(searchQuery, selectedTabulatorType);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.searchForm}>\r\n      <input\r\n        className={styles.searchInput}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"Type in to find your music\"\r\n        value={searchQuery}\r\n        onChange={(event) => {\r\n          setSearchQuery(event.target.value);\r\n        }}\r\n      />\r\n      <select\r\n        className={styles.searchSelect}\r\n        value={selectedTabulatorType}\r\n        onChange={(event) =>\r\n          setSelectedTabulatorType(event.target.value as Tabulator)\r\n        }\r\n      >\r\n        {tabulatorTypes.map(({ value, label }) => (\r\n          <option value={value} key={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button\r\n        type=\"submit\"\r\n        value=\"Search\"\r\n        className={styles.searchButton}\r\n        disabled={searchStatus === \"LOADING\"}\r\n      >\r\n        <span>Search</span>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n          <path d=\"M9.145 18.29c-5.042 0-9.145-4.102-9.145-9.145s4.103-9.145 9.145-9.145 9.145 4.103 9.145 9.145-4.102 9.145-9.145 9.145zm0-15.167c-3.321 0-6.022 2.702-6.022 6.022s2.702 6.022 6.022 6.022 6.023-2.702 6.023-6.022-2.702-6.022-6.023-6.022zm9.263 12.443c-.817 1.176-1.852 2.188-3.046 2.981l5.452 5.453 3.014-3.013-5.42-5.421z\" />\r\n        </svg>\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\nimport { RecordView, Tabulator } from \"models/tabulator\";\r\nimport styles from \"./ResultsList.module.scss\";\r\nimport { tabulatorsConverter, titleMessage } from \"dictionaries/tabulatorTypes\";\r\n\r\ninterface ResultsListProps {\r\n  list: RecordView[];\r\n  searchStatus: ResponseStatus;\r\n}\r\n\r\nconst renderSingleType = (tab: Tabulator) => {\r\n  let renderedName = tabulatorsConverter[tab];\r\n  return (\r\n    <li className={styles[renderedName]} key={tab}>\r\n      {renderedName}\r\n    </li>\r\n  );\r\n};\r\n\r\nfunction ResultsList({ list, searchStatus }: ResultsListProps) {\r\n  if (searchStatus === \"ERROR\") {\r\n    return <p>Sorry, something went wrong :( Please try again later.</p>;\r\n  }\r\n\r\n  return (\r\n    <section className={styles.searchResults}>\r\n      {searchStatus === \"LOADING\" && <div className={styles.spinner}></div>}\r\n      {searchStatus === \"INIT\" && <h2>{titleMessage[searchStatus]}</h2>}\r\n\r\n      {list.length === 0 && searchStatus === \"SUCCESS\" && (\r\n        <p>Sorry, we didn't find your tabulators :( </p>\r\n      )}\r\n\r\n      <table>\r\n        <tbody>\r\n          {list.map(({ artist, songTitle, tabTypes }, id) => (\r\n            <tr key={id} className={styles.searchRecord}>\r\n              <td className={styles.songTitle}>{songTitle}</td>\r\n              <td className={styles.artist}>{artist}</td>\r\n              <td className={styles.tabulators}>\r\n                <ul>{tabTypes.map(renderSingleType)}</ul>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ResultsList;\r\n","import { RecordResponse, Tabulator, RecordView } from \"models/tabulator\";\r\n\r\nexport const getTabs = async (\r\n  query: string,\r\n  tabulator: Tabulator\r\n): Promise<RecordResponse[]> => {\r\n  let apiURL = ` https://cors-anywhere.herokuapp.com/http://www.songsterr.com/a/ra/songs.json?pattern=${query}`;\r\n\r\n  if (tabulator !== Tabulator.ANY) {\r\n    apiURL = `${apiURL}&track=${tabulator}`;\r\n  }\r\n\r\n  return (await fetch(apiURL)).json();\r\n};\r\n\r\nexport const recordToView = ({\r\n  artist,\r\n  title,\r\n  tabTypes,\r\n}: RecordResponse): RecordView => {\r\n  return {\r\n    artist: artist.name,\r\n    songTitle: title,\r\n    tabTypes,\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { SearchForm, ResultsList } from \"components\";\r\nimport { RecordView, Tabulator, RecordResponse } from \"models/tabulator\";\r\nimport { getTabs, recordToView } from \"api/musicTab\";\r\nimport styles from \"./MainPage.module.scss\";\r\n\r\nfunction MainPage() {\r\n  const [resultsList, setResultsList] = useState<RecordView[]>([]);\r\n  const [searchStatus, setSearchStatus] = useState<ResponseStatus>(\"INIT\");\r\n\r\n  const onSubmit = (query: string, tabulatorType: Tabulator): void => {\r\n    setSearchStatus(\"LOADING\");\r\n    const results: Promise<RecordResponse[]> = getTabs(query, tabulatorType);\r\n    results\r\n      .then((res) => {\r\n        const preparedList: RecordView[] = res.map(recordToView);\r\n        setSearchStatus(\"SUCCESS\");\r\n        setResultsList(preparedList);\r\n      })\r\n      .catch(() => {\r\n        setSearchStatus(\"ERROR\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className={styles.header}>\r\n        <h1>Find your tabulators</h1>\r\n      </header>\r\n      <div className=\"container\">\r\n        <SearchForm onSubmit={onSubmit} searchStatus={searchStatus} />\r\n        <ResultsList list={resultsList} searchStatus={searchStatus} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport { MainPage } from \"pages\";\r\n\r\nfunction App() {\r\n  return <MainPage />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}